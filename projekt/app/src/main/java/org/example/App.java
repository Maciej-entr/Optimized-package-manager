/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

// Główna klasa aplikacji - punkt wejścia do programu (w języku Java)
import java.util.Scanner;

public class App {
    private static Scanner scanner = new Scanner(System.in); // Inicjalizacja skanera do odczytu danych wejściowych
    private static PackingSimulator simulator = new PackingSimulator(); // Utworzenie symulatora pakowania

    public static void main(String[] args) {
        // Metoda główna - start programu
        boolean running = true;
        while (running) {
            displayMenu(); // Wyświetlamy menu z opcjami
            int choice = getValidChoice(); // Pobieramy poprawny wybór użytkownika

            switch (choice) {
                case 1:
                    runNewSimulation(); // Rozpoczynamy nową symulację pakowania
                    break;
                case 2:
                    displayDetailedStatistics(); // Wyświetlamy szczegółowe statystyki symulacji
                    break;
                case 3:
                    running = false; // Ustawiamy flagę, aby zakończyć pętlę i program
                    break;
                default:
                    System.out.println("Invalid option. Please try again."); // Komunikat o nieprawidłowej opcji
            }
        }
        scanner.close(); // Zamykamy skaner po zakończeniu programu
        System.out.println("Thank you for using the Package Simulator!"); // Podziękowanie za korzystanie z symulatora
    }

    private static void displayMenu() {
        // Metoda odpowiedzialna za wyświetlanie menu głównego programu
        System.out.println("\n=== Package Simulator Menu ===");
        System.out.println("1. Run new simulation");
        System.out.println("2. Display detailed statistics");
        System.out.println("3. Exit");
        System.out.print("Enter your choice (1-3): ");
    }

    private static int getValidChoice() {
        // Metoda, która zapewnia, że użytkownik wprowadził liczbę
        while (!scanner.hasNextInt()) {
            System.out.println("Please enter a valid number."); // Prośba o wprowadzenie prawidłowej liczby
            scanner.next(); // Pomijamy nieprawidłowe dane
        }
        return scanner.nextInt(); // Zwrot poprawnej liczby jako wyboru
    }

    private static void runNewSimulation() {
        // Metoda inicjująca nową symulację pakowania
        System.out.print("Enter number of packages to simulate: ");
        while (!scanner.hasNextInt()) {
            System.out.println("Please enter a valid number."); // Prośba o wprowadzenie liczby pakietów
            scanner.next(); // Pomijamy błędne wejście
        }
        int packageCount = scanner.nextInt();
        
        if (packageCount > 0) {
            simulator = new PackingSimulator(); // Resetujemy symulator przed startem nowej symulacji
            simulator.generatePackages(packageCount); // Generujemy zadaną liczbę pakietów
            simulator.runSimulation(); // Uruchamiamy symulację pakowania
            simulator.printStatistics(); // Wyświetlamy statystyki symulacji
        } else {
            System.out.println("Number of packages must be greater than 0"); // Komunikat o błędzie przy niepoprawnej liczbie pakietów
        }
    }

    private static void displayDetailedStatistics() {
        // Metoda wyświetlająca szczegółowe statystyki kontenerów oraz niepakowanych pakietów
        if (simulator.getContainers().isEmpty()) {
            System.out.println("No simulation has been run yet."); // Informacja, że nie przeprowadzono żadnej symulacji
            return;
        }
        
        System.out.println("\n=== Detailed Statistics ===");
        System.out.println("Container Details:");
        for (Container container : simulator.getContainers()) {
            // Dla każdego kontenera wypisujemy id, stopień wykorzystania oraz liczbę pakietów
            System.out.printf("Container %s: %.2f%% utilized, %d packages\n",
                container.getId(),
                container.getUtilization(),
                container.getPackages().size());
        }
        
        System.out.println("\nUnpacked Packages:");
        for (Package pkg : simulator.getPendingPackages()) {
            System.out.println(pkg.toString()); // Wypisujemy pakiety, które nie zostały zapakowane
        }
    }
}
